############################################################
# STAGE1: Use a lightweight Go image to build the WASM binary
FROM golang:alpine AS wasmbuilder

# Update package index to ensure latest security patches
RUN apk update && apk upgrade

# Set the working directory inside the container
WORKDIR /app

# Copy the Go source code into the container
COPY ./client1/ .

# Build the Go WASM binary
RUN GOOS=js GOARCH=wasm go build -o ./main.wasm

#ENV GOROOT=/usr/local/go
#COPY $GOROOT/misc/wasm/wasm_exec.js ./out/
#COPY /usr/local/go/misc/wasm/wasm_exec.js ./out/
RUN cp /usr/local/go/misc/wasm/wasm_exec.js .

############################################################
# STAGE2: Build Rust WASM client
#FROM rust:alpine AS rustwasmbuilder
FROM rust:1.82.0 AS rustwasmbuilder

WORKDIR /app

# Update package index and upgrade packages to reduce vulnerabilities
RUN apk update && apk upgrade

# Install wasm target
RUN rustup target add wasm32-unknown-unknown

# Optionally install wasm-bindgen-cli if you're using it
RUN cargo install wasm-bindgen-cli

# Copy your Rust project source
COPY ./rust-client/ .

# Build your Rust WASM app
RUN cargo build --release --target wasm32-unknown-unknown

# (Optional) If you're using wasm-bindgen for bindings
RUN wasm-bindgen --out-dir ./out --target web ./target/wasm32-unknown-unknown/release/rust_client.wasm

############################################################
# STAGE3: Use a lightweight Go image to build the webserver
FROM golang:alpine AS webserverbuilder

# Update package index and upgrade packages to reduce vulnerabilities
RUN apk update && apk upgrade

# Set working directory in the container
WORKDIR /app

# Copy the Go web server source code to the container
COPY ./web-server/ .

# Build the Go web server
RUN go mod download
RUN go build -o webserver .

############################################################
# STAGE4: Create a clean image for the final output
FROM alpine:latest AS final

# Copy the compiled wasm binary from the builder stage
COPY --from=wasmbuilder /app/main.wasm .
COPY --from=wasmbuilder /app/wasm_exec.js .

# Copy the compiled webserver binary from the builder stage
COPY --from=webserverbuilder /app/webserver .
COPY --from=webserverbuilder /app/*.html .
COPY --from=webserverbuilder /app/favicon.ico .

# Copy Rust WASM output
COPY --from=rustwasmbuilder /app/out/*.wasm ./
COPY --from=rustwasmbuilder /app/out/*.js ./

# If not using wasm-bindgen, and only using raw .wasm, then:
# COPY --from=rustwasmbuilder /app/target/wasm32-unknown-unknown/release/*.wasm ./

# Expose the port the web server listens on
EXPOSE 8081

# Command to run the web server
CMD ["./webserver"]
