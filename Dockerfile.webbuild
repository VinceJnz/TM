############################################################
# STAGE1: Use a lightweight Go image to build the WASM binary
FROM golang:1.21.10-alpine AS wasmbuilder

# Set the working directory inside the container
WORKDIR /app

# Copy the Go source code into the container
COPY ./client1/ .

# Build the Go WASM binary
RUN GOOS=js GOARCH=wasm go build -o ./main.wasm

#ENV GOROOT=/usr/local/go
#COPY $GOROOT/misc/wasm/wasm_exec.js ./out/
#COPY /usr/local/go/misc/wasm/wasm_exec.js ./out/
RUN cp /usr/local/go/misc/wasm/wasm_exec.js .


############################################################
# STAGE2: Use a lightweight Go image to build the webserver
FROM golang:1.21.10-alpine AS webserverbuilder

# Set working directory in the container
WORKDIR /app

# Copy the Go web server source code to the container
COPY ./web-server/ .

# Build the Go web server
RUN go mod download
RUN go build -o webserver .

############################################################
# STAGE 3: Create a clean image for the final output
FROM alpine:latest AS final

# Copy the compiled webserver binary from the builder stage
COPY --from=wasmbuilder /app/main.wasm .
COPY --from=wasmbuilder /app/wasm_exec.js .
COPY --from=webserverbuilder /app/webserver .
#COPY --from=webserverbuilder /app/index.html .
COPY --from=webserverbuilder /app/*.html .
COPY --from=webserverbuilder /app/favicon.ico .

# Expose the port the web server listens on
EXPOSE 8081

# Command to run the web server
CMD ["./webserver"]
