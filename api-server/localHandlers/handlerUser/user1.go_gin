//package handlerUser

import (
	"database/sql"
	"log"
	"net/http"
	"strconv"

	"api-server/v2/models"

	"github.com/gin-gonic/gin"
	"github.com/jmoiron/sqlx"
)

const debug = "handlerUser"

type Handler struct {
	db *sqlx.DB
}

func New(db *sqlx.DB) *Handler {
	return &Handler{db: db}
}

// GetAll: retrieves and returns all records
func (h *Handler) GetAll(c *gin.Context) {
	var records []models.User
	err := h.db.Select(&records, `SELECT id, name, username, email FROM st_users`)
	if err == sql.ErrNoRows {
		c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		return
	} else if err != nil {
		log.Printf("%v.GetAll()2 %v\n", debug, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, records)
}

// Get: retrieves and returns a single record identified by id
func (h *Handler) Get(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		log.Printf("%v.Get()1 %v\n", debug, err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID"})
		return
	}

	var record models.User
	err = h.db.Get(&record, "SELECT id, name, username, email FROM st_users WHERE id = $1", id)
	if err == sql.ErrNoRows {
		c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		return
	} else if err != nil {
		log.Printf("%v.Get()2 %v\n", debug, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, record)
}

// Create: adds a new record and returns the new record
func (h *Handler) Create(c *gin.Context) {
	var record models.User
	if err := c.ShouldBindJSON(&record); err != nil {
		log.Printf("%v.Create()1 %v\n", debug, err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid JSON payload"})
		return
	}

	result, err := h.db.Exec(
		"INSERT INTO st_users (name, username, email) VALUES ($1, $2, $3) RETURNING id",
		record.Name, record.Username, record.Email)
	if err != nil {
		log.Printf("%v.Create()2 %v\n", debug, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	newID, _ := result.LastInsertId()
	record.ID = int(newID)
	c.JSON(http.StatusCreated, record)
}

// Update: modifies the existing record identified by id and returns the updated record
func (h *Handler) Update(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		log.Printf("%v.Update()1 %v\n", debug, err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID"})
		return
	}

	var record models.User
	if err := c.ShouldBindJSON(&record); err != nil {
		log.Printf("%v.Update()1 %v\n", debug, err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid JSON payload"})
		return
	}
	record.ID = id

	_, err = h.db.Exec("UPDATE st_users SET name = $1, username = $2, email = $3 WHERE id = $4",
		record.Name, record.Username, record.Email, record.ID)
	if err != nil {
		log.Printf("%v.Update()2 %v\n", debug, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, record)
}

// Delete: removes a record identified by id
func (h *Handler) Delete(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		log.Printf("%v.Delete()1 %v\n", debug, err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID"})
		return
	}

	_, err = h.db.Exec("DELETE FROM st_users WHERE id = $1", id)
	if err != nil {
		log.Printf("%v.Delete()2 %v\n", debug, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "User deleted successfully"})
}
