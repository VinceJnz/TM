// You can edit this code!
// Click here and start typing.
package handlerWebAuthn //main

import (
	"bytes"
	"fmt"
	"io"
	"net/http"

	"github.com/go-webauthn/webauthn/webauthn"
)

type User struct {
	ID             int                   `json:"id" db:"id"`
	Name           string                `json:"name" db:"name"`
	Username       string                `json:"username" db:"username"`
	Credentials    []webauthn.Credential `json:"credentials" db:"credentials"`         // WebAuthn credentials // Need to investigate how to store this in the DB ?????????
	WebAuthnHandle []byte                `json:"webauthn_handle" db:"webauthn_handle"` // This is the WebAuthn ID, which is a byte slice representation of the user ID
}

func (u User) WebAuthnID() []byte                         { return u.WebAuthnHandle }
func (u User) WebAuthnName() string                       { return u.Username }
func (u User) WebAuthnDisplayName() string                { return u.Name }
func (u User) WebAuthnIcon() string                       { return "" }
func (u User) WebAuthnCredentials() []webauthn.Credential { return u.Credentials }

func main() {
	var r http.Request
	user := User{
		ID: 28, Name: "test1", Username: "test1",
		Credentials: []webauthn.Credential{
			{
				ID:        []byte{234, 142, 146, 182, 246, 8, 213, 50, 106, 115, 128, 146, 164, 247, 186, 69},
				PublicKey: []byte{165, 1, 2, 3, 38, 32, 1, 33, 88, 32, 190, 85, 6, 74, 111, 138, 255, 172, 190, 63, 104, 188, 102, 182, 252, 180, 255, 143, 133, 136, 70, 18, 224, 40, 8, 13, 141, 138, 62, 157, 180, 98, 34, 88, 32, 135, 125, 218, 176, 158, 35, 73, 21, 139, 76, 36, 57, 198, 103, 122, 172, 255, 102, 189, 98, 34, 159, 203, 13, 134, 62, 87, 52, 116, 165, 148, 189},
				//AttestationType:none,
				//Transport:[],
				//Flags:{UserPresent:false UserVerified:false BackupEligible:false BackupState:false raw:0},
				Authenticator: webauthn.Authenticator{
					AAGUID:       []byte{234, 155, 141, 102, 77, 1, 29, 33, 60, 228, 182, 180, 140, 181, 117, 212},
					SignCount:    0,
					CloneWarning: false,
					//Attachment:,
				},
				//Attestation:
				//{
				//	ClientDataJSON:[],
				//	ClientDataHash:[],
				//	AuthenticatorData:[],
				//	PublicKeyAlgorithm:0 Object:[]
				//}
			},
		},
	}

	sessionData := webauthn.SessionData{
		Challenge:      "G4__pGzSlmh95n2QElM8eAeOe8FHGNZ1NhzOJlVKGC0",
		RelyingPartyID: "localhost",
		//UserID:[],
		AllowedCredentialIDs: [][]byte{{234, 142, 146, 182, 246, 8, 213, 50, 106, 115, 128, 146, 164, 247, 186, 69}},
		//Expires:0001-01-01 00:00:00 +0000 UTC,
		//UserVerification:,
		//Extensions:map[],
		//CredParams:[],
	}

	bodyBytes := []byte{123, 34, 105, 100, 34, 58, 34, 54, 111, 54, 83, 116, 118, 89, 73, 49, 84, 74, 113, 99, 52, 67, 83, 112, 80, 101, 54, 82, 81, 34, 44, 34, 116, 121, 112, 101, 34, 58, 34, 112, 117, 98, 108, 105, 99, 45, 107, 101, 121, 34, 44, 34, 114, 97, 119, 73, 100, 34, 58, 34, 54, 111, 54, 83, 116, 118, 89, 73, 49, 84, 74, 113, 99, 52, 67, 83, 112, 80, 101, 54, 82, 81, 34, 44, 34, 114, 101, 115, 112, 111, 110, 115, 101, 34, 58, 123, 34, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 111, 114, 68, 97, 116, 97, 34, 58, 34, 83, 90, 89, 78, 53, 89, 103, 79, 106, 71, 104, 48, 78, 66, 99, 80, 90, 72, 90, 103, 87, 52, 95, 107, 114, 114, 109, 105, 104, 106, 76, 72, 109, 86, 122, 122, 117, 111, 77, 100, 108, 50, 77, 90, 65, 65, 65, 65, 65, 65, 34, 44, 34, 99, 108, 105, 101, 110, 116, 68, 97, 116, 97, 74, 83, 79, 78, 34, 58, 34, 101, 121, 74, 48, 101, 88, 66, 108, 73, 106, 111, 105, 100, 50, 86, 105, 89, 88, 86, 48, 97, 71, 52, 117, 90, 50, 86, 48, 73, 105, 119, 105, 89, 50, 104, 104, 98, 71, 120, 108, 98, 109, 100, 108, 73, 106, 111, 105, 82, 122, 82, 102, 88, 51, 66, 72, 101, 108, 78, 115, 98, 87, 103, 53, 78, 87, 52, 121, 85, 85, 86, 115, 84, 84, 104, 108, 81, 87, 86, 80, 90, 84, 104, 71, 83, 69, 100, 79, 87, 106, 70, 79, 97, 72, 112, 80, 83, 109, 120, 87, 83, 48, 100, 68, 77, 67, 73, 115, 73, 109, 57, 121, 97, 87, 100, 112, 98, 105, 73, 54, 73, 109, 104, 48, 100, 72, 66, 122, 79, 105, 56, 118, 98, 71, 57, 106, 89, 87, 120, 111, 98, 51, 78, 48, 79, 106, 103, 119, 79, 68, 89, 105, 76, 67, 74, 106, 99, 109, 57, 122, 99, 48, 57, 121, 97, 87, 100, 112, 98, 105, 73, 54, 90, 109, 70, 115, 99, 50, 86, 57, 34, 44, 34, 115, 105, 103, 110, 97, 116, 117, 114, 101, 34, 58, 34, 77, 69, 85, 67, 73, 81, 67, 113, 71, 89, 85, 77, 89, 120, 83, 110, 45, 83, 97, 114, 68, 81, 100, 89, 56, 45, 53, 57, 97, 95, 111, 122, 81, 81, 71, 75, 122, 71, 70, 105, 107, 115, 54, 113, 114, 113, 67, 50, 74, 119, 73, 103, 97, 118, 72, 112, 116, 51, 89, 83, 89, 115, 103, 88, 54, 121, 65, 112, 113, 50, 72, 109, 102, 80, 88, 87, 72, 120, 76, 67, 55, 75, 98, 89, 101, 45, 107, 90, 65, 82, 56, 55, 102, 77, 77, 34, 44, 34, 117, 115, 101, 114, 72, 97, 110, 100, 108, 101, 34, 58, 34, 77, 122, 89, 49, 78, 87, 89, 119, 77, 122, 73, 116, 90, 106, 85, 48, 79, 83, 48, 48, 78, 71, 85, 52, 76, 84, 103, 52, 79, 87, 73, 116, 90, 87, 89, 53, 77, 122, 74, 106, 79, 71, 86, 104, 89, 106, 69, 52, 34, 125, 125}
	r.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))

	fmt.Printf("user = %+v", user)
	fmt.Printf("sessionData = %+v", sessionData)
	fmt.Printf("r = %+v", r)
}
