############################################################
# STAGE1: Use a lightweight Go image to build the WASM binary
FROM golang:1.21.10-alpine AS wasmbuilder

# Set the working directory inside the container
WORKDIR /app

# Copy the Go source code into the container
COPY ./client1/ .

# Build the Go WASM binary
RUN GOOS=js GOARCH=wasm go build -o ./main.wasm

#ENV GOROOT=/usr/local/go
#COPY $GOROOT/misc/wasm/wasm_exec.js ./out/
#COPY /usr/local/go/misc/wasm/wasm_exec.js ./out/
RUN cp /usr/local/go/misc/wasm/wasm_exec.js .

############################################################
# STAGE2: Use a lightweight Go image to build the binary
FROM golang:1.21.10-alpine AS apibuilder

# Set working directory in the container
WORKDIR /app

# Copy the Go API server source code to the container
COPY ./api-server/ .
COPY ./certs/api-server/ ./certs/

# Build the Go API server
RUN go mod download
RUN go build -o apiserver .

############################################################
# STAGE 3: Create a clean image for the final output
FROM alpine:latest AS final

# Copy the compiled wasm binary from the builder stage
COPY --from=wasmbuilder /app/main.wasm ./static/
COPY --from=wasmbuilder /app/wasm_exec.js ./static/

# Copy the compiled webserver binary from the builder stage
COPY --from=apibuilder /app/apiserver .
COPY --from=apibuilder /app/.env .
COPY --from=apibuilder /app/certs/* /etc/ssl/certs/

COPY --from=apibuilder /app/static/*.html ./static/
COPY --from=apibuilder /app/static/favicon.ico ./static/

COPY --from=apibuilder /app/static/*.html .
COPY --from=apibuilder /app/static/favicon.ico .

# Expose the port the API server listens on
EXPOSE 8085
EXPOSE 8086

# Command to run the API server
CMD ["./apiserver"]
