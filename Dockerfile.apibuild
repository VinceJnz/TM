############################################################
# STAGE1: Use a lightweight Go image to build the WASM binary
#FROM golang:1.23.4-alpine AS wasmbuilder
FROM tinygo/tinygo:latest AS wasmbuilder

# Set the working directory inside the container
#WORKDIR /app
WORKDIR /app

# Copy the Go source code into the container
#COPY ./client1/ .
COPY ./client2-NoSRP/ .

# Build the Go WASM binary
#RUN GOOS=js GOARCH=wasm go build -o ./main.wasm
RUN tinygo build -o main.wasm -target wasm ./ 

# Copy wasm_exec.js to target directory
#RUN cp /usr/local/go/misc/wasm/wasm_exec.js .
RUN cp /usr/local/tinygo/targets/wasm_exec.js .

############################################################
# STAGE2: Use a lightweight Go image to build the binary
FROM golang:1.23.4-alpine AS apibuilder

# Set working directory in the container
WORKDIR /app

# Copy the Go API server source code to the container
COPY ./api-server/ .
COPY ./certs/api-server/ ./certs/ssl/
COPY ./certs/gmail/ ./certs/gmail/
COPY ./certs/stripe/ ./certs/stripe/

# Build the Go API server
RUN go mod download
RUN go build -o apiserver .

############################################################
# STAGE 3: Create a clean image for the final output
FROM alpine:latest AS final

# Copy the compiled wasm binary from the builder stage to the static folder
COPY --from=wasmbuilder /app/main.wasm ./static/
COPY --from=wasmbuilder /app/wasm_exec.js ./static/

# Copy the static files from the builder stage to the static folder
COPY --from=apibuilder /app/static/*.html ./static/
COPY --from=apibuilder /app/static/*.css ./static/
COPY --from=apibuilder /app/static/*.txt ./static/
COPY --from=apibuilder /app/static/favicon.ico ./static/
COPY --from=apibuilder /app/static/favicon.png ./static/

# Copy the compiled webserver binary from the builder stage
COPY --from=apibuilder /app/apiserver .
COPY --from=apibuilder /app/.env .
COPY --from=apibuilder /app/certs/ssl/* /etc/certs/ssl/
COPY --from=apibuilder /app/certs/gmail/* /etc/certs/gmail/
COPY --from=apibuilder /app/certs/stripe/* /etc/certs/stripe/

# Expose the port the API server listens on
EXPOSE 8085
EXPOSE 8086

# Command to run the API server
CMD ["./apiserver"]
